{
    "contents" : "#backtester.r\n\nBacktest_ClassifierAlgo <- function(inp_params) {\n  # Perform a backtest of a specified classifier type using specified backtest parameters.\n  # Parameter list must contain the following objects:\n  # Model_XDataFile, XData_To_Use, Fit_Window, Rolling_Window_Performance, Prediction_Adjust_Factor, AdjustPredictedPositions\n  # Classifier_Type, Refit_Classifier_Periodicity\n  \n#   inp_params <- my_params\n#   inp_params <- list(\"Model_XDataFile\" = \"Data/SmallTestFile.csv\",\n#                      \"XData_To_Use\" = c(\"Returns\", \"PC1\", \"PC2\"),\n#                      \"Fit_Window\" = 250,\n#                      \"Rolling_Window_Performance\" = 10,\n#                      \"Prediction_Adjust_Factor\" = 0.5,\n#                      \"AdjustPredictedPositions\" = TRUE,\n#                      \"Classifier_Type\" = \"lda\",\n#                      \"Refit_Classifier_Periodicity\" = NA)\n  \n  outp_results <- list()  # List of backtest results and various calculated objects\n  \n  # Import the XData file\n  # ---\n  Logger(\"Importing XData...\")\n  model_xdata <- Get_XData(inp_params$Model_XDataFile)\n  outp_results$XData <- model_xdata\n  # ---\n  \n  \n  # Perform the initial classifier model fitting\n  # ---\n  Logger(\"Fitting classifier models...\")\n  classifiers_per_cross <- list()\n  for (i in seq_along(config$Crosses)) {\n    cat(\"Currently on cross:\", config$Crosses[i], \"\\n\")\n    inp_params$Cross <- config$Crosses[i]\n    tmp_training_data <- head(model_xdata, inp_params$Fit_Window)\n    tmp_data <- Get_SubsetData_ForClassification(inp_data = tmp_training_data, inp_params = inp_params)\n    classifiers_per_cross[[config$Crosses[i]]] <- Fit_Classifier(inp_data = tmp_data, inp_params = inp_params)\n  }\n  outp_results$Cross_Classifiers <- classifiers_per_cross\n  # ---\n  \n  \n  # Iterate through all data\n  # ---\n  Logger(\"Performing backtest...\")\n  \n  # Initialise some data.frames to store data throughout iterations \n  tmp_predictions_raw <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Crosses)))\n  tmp_predictions_adj <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Crosses)))\n  tmp_predictions_accuracy <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Crosses)))\n  tmp_predictions_accuracy_rolling <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Crosses)))\n  tmp_currency_targets <- data.frame(matrix(NA, nrow(model_xdata), length(config$Currencies), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Currencies)))\n  tmp_currency_returns <- data.frame(matrix(NA, nrow(model_xdata), length(config$Currencies), dimnames=list(gsub(\"-\", \"-\", as.Date(model_xdata$DateTime_DataType, \"%d/%m/%Y\")), config$Currencies)))\n  \n  # Extract concise array of cross returns for ease of use in backtester\n  cross_returns_array <- model_xdata[, c(1, match(paste(config$Crosses, \".1_Return\", sep=\"\"), names(model_xdata)))]  # Array of cross returns\n  colnames(cross_returns_array) <- c(\"Datetime\", config$Crosses)  # Put better headers (excluding the .1_Return bit)\n  \n  # Begin iterations through model_xdata (beyond initial classifier training data range), generating targets\n  time_since_fit <- 0\n  for (i in (inp_params$Fit_Window + 1):nrow(model_xdata)) {\n    \n    # Progress print at set intervals\n    # ---\n    if (i %% 50 == 0)\n      Logger(paste(\"On date \", i, \" of \", nrow(model_xdata), \" ... \", sep=\"\"))\n    # ---\n    \n    # Section here to do something special like re-fit a model if certain criteria met\n    # ---\n    if (!is.na(inp_params$Refit_Classifier_Periodicity)) {  # Refit the classifier models here\n      # This should all live in a separate method, just to be called now\n      if (time_since_fit == inp_params$Refit_Classifier_Periodicity) {\n        Logger(\"Re-fitting classifier models...\")\n        classifiers_per_cross <- list()\n        for (k in seq_along(config$Crosses)) {\n          cat(\"Currently on cross:\", config$Crosses[k], \"\\n\")\n          inp_params$Cross <- config$Crosses[k]\n          tmp_training_data <- model_xdata[(i - inp_params$Fit_Window):(i - 1), ]\n          tmp_data <- Get_SubsetData_ForClassification(inp_data = tmp_training_data, inp_params = inp_params)\n          classifiers_per_cross[[config$Crosses[k]]] <- Fit_Classifier(inp_data = tmp_data, inp_params = inp_params)\n        }\n        outp_results$Cross_Classifiers <- classifiers_per_cross\n        time_since_fit <- 0\n      }\n    }\n    # ---\n    \n    # Use xdata to classify the next day return\n    # ---\n    for (j in seq_along(config$Crosses)) {\n      tmp_cross <- config$Crosses[j]\n      \n      # Get today data for classifier for this cross\n      inp_params$Cross <- tmp_cross\n      tmp_today_data <- Get_SubsetData_ForPrediction(inp_data = model_xdata[i, ], inp_params = inp_params)  # Current day xdata\n      \n      # Get prediction and record the result as a 1 (buy) or -1 (sell)\n      tmp_today_predictions <- Get_ClassifierPrediction(classifiers_per_cross[[tmp_cross]], tmp_today_data, inp_params) \n      if (tmp_today_predictions$class == \"B\")\n        tmp_predictions_raw[i, j] <- 1\n      else if (tmp_today_predictions$class == \"S\")\n        tmp_predictions_raw[i, j] <- -1\n      \n      # Record whether this was a correct prediction using next day cross return (if not already last row)\n      if (i < nrow(model_xdata))\n        tmp_predictions_accuracy[i, j] <- as.numeric(sign(tmp_predictions_raw[i, j]) == sign(cross_returns_array[[tmp_cross]][i + 1]))\n      \n      # Calculate the rolling window prediction accuracy ratio (if sufficient predictions made) and create a performance-adjusted prediction \n      if (i > (inp_params$Fit_Window + inp_params$Rolling_Window_Performance)) {\n        tmp <- tmp_predictions_accuracy[(i - inp_params$Rolling_Window_Performance):(i - 1), j]  # Window of prediction accuracies for this cross\n        tmp_predictions_accuracy[i, j] <- sum(tmp == 1) / inp_params$Rolling_Window_Performance  # Accuracy ratio      \n        tmp_predictions_adj[i, j] <- tmp_predictions_raw[i, j] * (1 + inp_params$Prediction_Adjust_Factor * (tmp_predictions_accuracy[i, j] - 0.5) / 0.5)\n      }\n      \n    }\n    # ---\n    \n    # Aggregate predictions to get currency level targets\n    # ---\n    for (j in seq_along(config$Currencies)) {\n      \n      tmp_ccy <- config$Currencies[j]  # This currency\n      \n      tmp_cxs_as_base <- config$Crosses[grep(tmp_ccy, substr(config$Crosses, 1, 3))]  # Crosses with the target ccy as base\n      tmp_cxs_as_quote <- config$Crosses[grep(tmp_ccy, substr(config$Crosses, 4, 6))]  # Crosses with the target ccy as quote\n      \n      tmp_pos_as_base <- tmp_pos_as_quote <- 0  # Default values at 0\n      if (!all(is.na(tmp_predictions_adj[tmp_cxs_as_base][i, ])))\n        tmp_pos_as_base <- sum(tmp_predictions_adj[tmp_cxs_as_base][i, ], na.rm=TRUE)  # Sum of predictions where currency is base\n      if (!all(is.na(tmp_predictions_adj[tmp_cxs_as_quote][i, ])))\n        tmp_pos_as_quote <- sum(tmp_predictions_adj[tmp_cxs_as_quote][i, ], na.rm=TRUE)  # Sum of predictions where currency is quote\n      \n      tmp_currency_targets[i, j] <- tmp_pos_as_base - tmp_pos_as_quote  # Total aggregated currency holding (\"as quote\" sum contributes as negative)\n    }\n    # ---\n    \n    # Get resulting return from the target currency holdings\n    # ---\n    if (i < nrow(model_xdata)) {\n      for (j in seq_along(config$Currencies)) {\n        \n        tmp_ccy <- config$Currencies[j]\n        if (tmp_ccy == \"USD\") {\n          tmp_currency_returns[i, j] <- 0\n        } else if (tmp_ccy %in% c(\"EUR\", \"GBP\", \"AUD\", \"NZD\")) {\n          tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j]\n        } else {\n          tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j] * -1\n        }\n        \n      }\n    }\n    # ---\n    \n    time_since_fit <- time_since_fit + 1\n    \n  }\n  Logger(\"Done!\", inp_new_line = FALSE)\n  \n  # Add some of the data arrays to the return list for user\n  outp_results$Cross_Predictions <- tmp_predictions_adj\n  outp_results$Cross_Predictions_Accuracy <- tmp_predictions_accuracy\n  outp_results$Cross_Predictions_Accuracy_Rolling <- tmp_predictions_accuracy_rolling\n  outp_results$Currency_Targets <- tmp_currency_targets\n  outp_results$Currency_Returns <- tmp_currency_returns\n  \n  return (outp_results)\n  \n}\n\nBacktest_ClassifierAlgo_WithRefits <- function(inp_params) {\n  # Perform a backtest of a specified classifier\n  #inp_params <- my_params\n  outp_results <- list()  # List of backtest results and various calculated objects\n  \n  # Import the XData file\n  # ---\n  Logger(\"Importing XData...\")\n  model_xdata <- Get_XData(inp_params$Model_XDataFile)\n  outp_results$XData <- model_xdata\n  # ---\n  \n  \n  # Perform the initial classifier model fitting\n  # ---\n  Logger(\"Fitting classifier models...\")\n  classifiers_per_cross <- list()\n  for (i in seq_along(config$Crosses)) {\n    cat(\"Currently on cross:\", config$Crosses[i], \"\\n\")\n    inp_params$Cross <- config$Crosses[i]\n    tmp_training_data <- head(model_xdata, inp_params$Fit_Window)\n    tmp_data <- Get_SubsetData_ForClassification(inp_data = tmp_training_data, inp_params = inp_params)\n    classifiers_per_cross[[config$Crosses[i]]] <- Fit_Classifier(inp_data = tmp_data, inp_params = inp_params)\n  }\n  outp_results$Cross_Classifiers <- classifiers_per_cross\n  # ---\n  \n  \n  # Iterate through all data\n  # ---\n  Logger(\"Performing backtest...\")\n  \n  # Define all arrays of output information that we will generate during backtest\n  outp_predictions_raw <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Raw cross classifications\n  outp_predictions_adj <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Adjusted cross classifications\n  outp_predictions_accuracy <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Rolling prediction accuracy ratios\n  outp_rolling_accuracy <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Rolling prediction accuracy ratios\n  outp_currency_targets_raw <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Currency targets (aggregation of raw cross predictions)\n  outp_currency_targets_adj <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Currency targets (aggregation of adjusted cross predictions)\n  outp_aggregated_currency_returns_raw <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Returns from the raw target currency positions\n  outp_aggregated_currency_returns_adj <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Returns from the adjusted target currency positions\n  \n  # Extract concise array of cross returns for ease of use in backtester\n  cross_returns_array <- model_xdata[, c(1, match(paste(config$Crosses, \".1_Return\", sep=\"\"), names(model_xdata)))]  # Array of cross returns\n  colnames(cross_returns_array) <- c(\"Datetime\", config$Crosses)  # Put better headers (excluding the .1_Return bit)\n  \n  # Begin iterations through model_xdata (beyond initial classifier training data range), generating targets\n  time_to_refit <- inp_params$Classifier_Refit_Period\n  for (i in (inp_params$Fit_Window + 1):nrow(model_xdata)) {\n    if (i %% 50 == 0)\n      Logger(paste(\"On date \", i, \" of \", nrow(model_xdata), \" ... \", sep=\"\"))\n    \n    \n    # Perform a re-fitting of the classifiers per cross if time_to_refit has reached 0\n    # ---\n    if (time_to_refit == 0) {\n      Logger(\"Re-fitting classifier models...\")\n      classifiers_per_cross <- list()\n      for (k in seq_along(config$Crosses)) {\n        cat(\"Currently on cross:\", config$Crosses[k], \"\\n\")\n        inp_params$Cross <- config$Crosses[k]\n        tmp_training_data <- model_xdata[(i - inp_params$Fit_Window):(i - 1), ]\n        tmp_data <- Get_SubsetData_ForClassification(inp_data = tmp_training_data, inp_params = inp_params)\n        classifiers_per_cross[[config$Crosses[k]]] <- Fit_Classifier(inp_data = tmp_data, inp_params = inp_params)\n      }\n      outp_results$Cross_Classifiers <- classifiers_per_cross\n      time_to_refit <- inp_params$Classifier_Refit_Period\n    }\n    # ---\n    \n    # Get cross prediction/classifications for next day returns using current day xdata\n    for (j in seq_along(config$Crosses)) {\n      tmp_cross <- config$Crosses[j]\n      \n      # Get today data for classifier for this cross\n      inp_params$Cross <- tmp_cross\n      tmp_today_data <- Get_SubsetData_ForPrediction(inp_data = model_xdata[i, ], inp_params = inp_params)  # Current day xdata\n      \n      # Get prediction and record the result as a 1 (buy) or -1 (sell)\n      tmp_today_predictions <- Get_ClassifierPrediction(classifiers_per_cross[[tmp_cross]], tmp_today_data, inp_params) \n      if (tmp_today_predictions$class == \"B\")\n        outp_predictions_raw[i, j] <- 1\n      else if (tmp_today_predictions$class == \"S\")\n        outp_predictions_raw[i, j] <- -1\n      \n      # Record whether this was a correct prediction using next day cross return (if not already last row)\n      if (i < nrow(model_xdata))\n        outp_predictions_accuracy[i, j] <- as.numeric(sign(outp_predictions_raw[i, j]) == sign(cross_returns_array[[tmp_cross]][i + 1]))\n      \n      # Calculate the rolling window prediction accuracy ratio (if sufficient predictions made) and create a performance-adjusted prediction \n      if (i > (inp_params$Fit_Window + inp_params$Rolling_Window_Performance)) {\n        tmp <- outp_predictions_accuracy[(i - inp_params$Rolling_Window_Performance):(i - 1), j]  # Window of prediction accuracies for this cross\n        outp_rolling_accuracy[i, j] <- sum(tmp == 1) / inp_params$Rolling_Window_Performance  # Accuracy ratio      \n        outp_predictions_adj[i, j] <- outp_predictions_raw[i, j] * (1 + inp_params$Prediction_Adjust_Factor * (outp_rolling_accuracy[i, j] - 0.5) / 0.5)\n      }\n      \n    }\n    \n    # Aggregate all predictions to get currency level targets\n    for (j in seq_along(config$Currencies)) {\n      tmp_ccy <- config$Currencies[j]  # This currency\n      tmp_cols_as_base <- grep(tmp_ccy, substr(config$Crosses, 1, 3))  # Prediction columns where this currency is base ccy\n      tmp_cols_as_quote <- grep(tmp_ccy, substr(config$Crosses, 4, 6))  # Prediction columns where this currency is quote ccy\n      \n      # Get sum of preds where ccy appears as base currency \n      tmp_pos_as_base_raw <- sum(outp_predictions_raw[i, tmp_cols_as_base])  # (raw preds)\n      tmp_pos_as_base_adj <- sum(outp_predictions_adj[i, tmp_cols_as_base])  # (adj preds)\n      \n      # Get sum of preds where ccy appears as quote currency \n      tmp_pos_as_quote_raw <- sum(outp_predictions_raw[i, tmp_cols_as_quote])  # Row sums from where this currency appears as quote currency in cross (raw preds)\n      tmp_pos_as_quote_adj <- sum(outp_predictions_adj[i, tmp_cols_as_quote])  # Row sums from where this currency appears as quote currency in cross (adj preds)\n      \n      # Get total position from base and subtract total where appear as quote\n      outp_currency_targets_raw[i, j] <- tmp_pos_as_base_raw - tmp_pos_as_quote_raw  # Total aggregated currency holding, add \"from base\" contributions and subtract \"from quote\" contributions (RAW PREDS)\n      outp_currency_targets_adj[i, j] <- tmp_pos_as_base_adj - tmp_pos_as_quote_adj  # Total aggregated currency holding, add \"from base\" contributions and subtract \"from quote\" contributions (ADJ PREDS)\n      \n    }\n    \n    # Get resulting return from the target currency holdings\n    if (i < nrow(model_xdata)) {\n      for (j in seq_along(config$Currencies)) {\n        \n        tmp_ccy <- config$Currencies[j]\n        if (tmp_ccy == \"USD\") {\n          outp_aggregated_currency_returns_raw[i, j] <- 0\n          outp_aggregated_currency_returns_adj[i, j] <- 0\n        } else if (tmp_ccy %in% c(\"EUR\", \"GBP\", \"AUD\", \"NZD\")) {\n          outp_aggregated_currency_returns_raw[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_raw[i, j]\n          outp_aggregated_currency_returns_adj[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_adj[i, j]\n        } else {\n          outp_aggregated_currency_returns_raw[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_raw[i, j] * -1\n          outp_aggregated_currency_returns_adj[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_adj[i, j] * -1\n        }\n        \n        \n      }\n    }\n    \n    time_to_refit <- time_to_refit - 1\n    \n  }\n  Logger(\"Done!\", inp_new_line = FALSE)\n  \n  # Convert output arrays to dataframes and add to return list\n  # Predictions_raw\n  outp_predictions_raw <- data.frame(outp_predictions_raw)\n  colnames(outp_predictions_raw) <- config$Crosses; rownames(outp_predictions_raw) <- model_xdata[, 1]\n  outp_results$Predictions_Raw <- outp_predictions_raw\n  # Predictions_adj\n  outp_predictions_adj <- data.frame(outp_predictions_adj)\n  colnames(outp_predictions_adj) <- config$Crosses; rownames(outp_predictions_adj) <- model_xdata[, 1]\n  outp_results$Predictions_Adjusted <- outp_predictions_adj\n  # Predictions_accuracy\n  outp_predictions_accuracy <- data.frame(outp_predictions_accuracy)\n  colnames(outp_predictions_accuracy) <- config$Crosses; rownames(outp_predictions_accuracy) <- model_xdata[, 1]\n  outp_results$Predictions_Accuracy <- outp_predictions_accuracy\n  # Predictions_rolling_accuracy\n  outp_rolling_accuracy <- data.frame(outp_rolling_accuracy)\n  colnames(outp_rolling_accuracy) <- config$Crosses; rownames(outp_rolling_accuracy) <- model_xdata[, 1]\n  outp_results$Predictions_Rolling_Accuracy <- outp_rolling_accuracy\n  # Currency_targets_raw\n  outp_currency_targets_raw <- data.frame(outp_currency_targets_raw)\n  colnames(outp_currency_targets_raw) <- config$Currencies; rownames(outp_currency_targets_raw) <- model_xdata[, 1]\n  outp_results$Currency_Targets_Raw <- outp_currency_targets_raw\n  # Currency_targets_adj\n  outp_currency_targets_adj <- data.frame(outp_currency_targets_adj)\n  colnames(outp_currency_targets_adj) <- config$Currencies; rownames(outp_currency_targets_adj) <- model_xdata[, 1]\n  outp_results$Currency_Targets_Adjusted <- outp_currency_targets_adj\n  # Currency_target_returns_raw\n  outp_aggregated_currency_returns_raw <- data.frame(outp_aggregated_currency_returns_raw)\n  colnames(outp_aggregated_currency_returns_raw) <- config$Currencies; rownames(outp_aggregated_currency_returns_raw) <- model_xdata[, 1]\n  outp_results$Currency_Target_Returns_Raw <- outp_aggregated_currency_returns_raw\n  # Currency_target_returns_adj\n  outp_aggregated_currency_returns_adj <- data.frame(outp_aggregated_currency_returns_adj)\n  colnames(outp_aggregated_currency_returns_adj) <- config$Currencies; rownames(outp_aggregated_currency_returns_adj) <- model_xdata[, 1]\n  outp_results$Currency_Target_Returns_Adjusted <- outp_aggregated_currency_returns_adj\n  \n  return (outp_results)\n  \n}\n\nBacktest_ClassifierAlgo_CrossSpecificClassifiers <- function(inp_params, inp_params_cross_specific_regression) {\n  # Perform a backtest of a specified classifier\n  #inp_params <- my_params\n  outp_results <- list()  # List of backtest results and various calculated objects\n  \n  # Import the XData file\n  # ---\n  Logger(\"Importing XData...\")\n  model_xdata <- Get_XData(inp_params$Model_XDataFile)\n  outp_results$XData <- model_xdata\n  # ---\n  \n  \n  # Perform the initial classifier model fitting\n  # ---\n  Logger(\"Fitting classifier models...\")\n  classifiers_per_cross <- list()\n  for (i in seq_along(config$Crosses)) {\n    cat(\"Currently on cross:\", config$Crosses[i], \"\\n\")\n    inp_params$Cross <- config$Crosses[i]\n    inp_params$XData_To_Use <- inp_params_cross_specific_regression[[config$Crosses[i]]]$XData_To_Use\n    inp_params$Classifier_Type <- inp_params_cross_specific_regression[[config$Crosses[i]]]$Classifier_Type\n    inp_params$Fit_Window <- inp_params_cross_specific_regression[[config$Crosses[i]]]$Fit_Window\n    tmp_training_data <- head(model_xdata, inp_params$Fit_Window)\n    tmp_data <- Get_SubsetData_ForClassification(inp_data = tmp_training_data, inp_params = inp_params)\n    classifiers_per_cross[[config$Crosses[i]]] <- Fit_Classifier(inp_data = tmp_data, inp_params = inp_params)\n  }\n  outp_results$Cross_Classifiers <- classifiers_per_cross\n  # ---\n  \n  \n  # Iterate through all data\n  # ---\n  Logger(\"Performing backtest...\")\n  \n  # Define all arrays of output information that we will generate during backtest\n  outp_predictions_raw <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Raw cross classifications\n  outp_predictions_adj <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Adjusted cross classifications\n  outp_predictions_accuracy <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Rolling prediction accuracy ratios\n  outp_rolling_accuracy <- matrix(NA, nrow(model_xdata), length(config$Crosses))  # Rolling prediction accuracy ratios\n  outp_currency_targets_raw <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Currency targets (aggregation of raw cross predictions)\n  outp_currency_targets_adj <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Currency targets (aggregation of adjusted cross predictions)\n  outp_aggregated_currency_returns_raw <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Returns from the raw target currency positions\n  outp_aggregated_currency_returns_adj <- matrix(NA, nrow(model_xdata), length(config$Currencies))  # Returns from the adjusted target currency positions\n  \n  # Extract concise array of cross returns for ease of use in backtester\n  cross_returns_array <- model_xdata[, c(1, match(paste(config$Crosses, \".1_Return\", sep=\"\"), names(model_xdata)))]  # Array of cross returns\n  colnames(cross_returns_array) <- c(\"Datetime\", config$Crosses)  # Put better headers (excluding the .1_Return bit)\n  \n  # Begin iterations through model_xdata (beyond initial classifier training data range), generating targets\n  for (i in (inp_params$Fit_Window + 1):nrow(model_xdata)) {\n    \n    if (i %% 50 == 0)\n      Logger(paste(\"On date \", i, \" of \", nrow(model_xdata), \" ... \", sep=\"\"))\n    \n    # Get cross prediction/classifications for next day returns using current day xdata\n    for (j in seq_along(config$Crosses)) {\n      tmp_cross <- config$Crosses[j]\n      \n      # Get today data for classifier for this cross\n      inp_params$Cross <- tmp_cross\n      inp_params$XData_To_Use <- inp_params_cross_specific_regression[[tmp_cross]]$XData_To_Use\n      inp_params$Classifier_Type <- inp_params_cross_specific_regression[[tmp_cross]]$Classifier_Type\n      inp_params$Fit_Window <- inp_params_cross_specific_regression[[tmp_cross]]$Fit_Window\n      tmp_today_data <- Get_SubsetData_ForPrediction(inp_data = model_xdata[i, ], inp_params = inp_params)  # Current day xdata\n      \n      # Get prediction and record the result as a 1 (buy) or -1 (sell)\n      tmp_today_predictions <- Get_ClassifierPrediction(classifiers_per_cross[[tmp_cross]], tmp_today_data, inp_params) \n      if (tmp_today_predictions$class == \"B\")\n        outp_predictions_raw[i, j] <- 1\n      else if (tmp_today_predictions$class == \"S\")\n        outp_predictions_raw[i, j] <- -1\n      \n      # Record whether this was a correct prediction using next day cross return (if not already last row)\n      if (i < nrow(model_xdata))\n        outp_predictions_accuracy[i, j] <- as.numeric(sign(outp_predictions_raw[i, j]) == sign(cross_returns_array[[tmp_cross]][i + 1]))\n      \n      # Calculate the rolling window prediction accuracy ratio (if sufficient predictions made) and create a performance-adjusted prediction \n      if (i > (inp_params$Fit_Window + inp_params$Rolling_Window_Performance)) {\n        tmp <- outp_predictions_accuracy[(i - inp_params$Rolling_Window_Performance):(i - 1), j]  # Window of prediction accuracies for this cross\n        outp_rolling_accuracy[i, j] <- sum(tmp == 1) / inp_params$Rolling_Window_Performance  # Accuracy ratio      \n        outp_predictions_adj[i, j] <- outp_predictions_raw[i, j] * (1 + inp_params$Prediction_Adjust_Factor * (outp_rolling_accuracy[i, j] - 0.5) / 0.5)\n      }\n      \n    }\n    \n    # Aggregate all predictions to get currency level targets\n    for (j in seq_along(config$Currencies)) {\n      tmp_ccy <- config$Currencies[j]  # This currency\n      tmp_cols_as_base <- grep(tmp_ccy, substr(config$Crosses, 1, 3))  # Prediction columns where this currency is base ccy\n      tmp_cols_as_quote <- grep(tmp_ccy, substr(config$Crosses, 4, 6))  # Prediction columns where this currency is quote ccy\n      \n      # Get sum of preds where ccy appears as base currency \n      tmp_pos_as_base_raw <- sum(outp_predictions_raw[i, tmp_cols_as_base])  # (raw preds)\n      tmp_pos_as_base_adj <- sum(outp_predictions_adj[i, tmp_cols_as_base])  # (adj preds)\n      \n      # Get sum of preds where ccy appears as quote currency \n      tmp_pos_as_quote_raw <- sum(outp_predictions_raw[i, tmp_cols_as_quote])  # Row sums from where this currency appears as quote currency in cross (raw preds)\n      tmp_pos_as_quote_adj <- sum(outp_predictions_adj[i, tmp_cols_as_quote])  # Row sums from where this currency appears as quote currency in cross (adj preds)\n      \n      # Get total position from base and subtract total where appear as quote\n      outp_currency_targets_raw[i, j] <- tmp_pos_as_base_raw - tmp_pos_as_quote_raw  # Total aggregated currency holding, add \"from base\" contributions and subtract \"from quote\" contributions (RAW PREDS)\n      outp_currency_targets_adj[i, j] <- tmp_pos_as_base_adj - tmp_pos_as_quote_adj  # Total aggregated currency holding, add \"from base\" contributions and subtract \"from quote\" contributions (ADJ PREDS)\n      \n    }\n    \n    # Get resulting return from the target currency holdings\n    if (i < nrow(model_xdata)) {\n      for (j in seq_along(config$Currencies)) {\n        \n        tmp_ccy <- config$Currencies[j]\n        if (tmp_ccy == \"USD\") {\n          outp_aggregated_currency_returns_raw[i, j] <- 0\n          outp_aggregated_currency_returns_adj[i, j] <- 0\n        } else if (tmp_ccy %in% c(\"EUR\", \"GBP\", \"AUD\", \"NZD\")) {\n          outp_aggregated_currency_returns_raw[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_raw[i, j]\n          outp_aggregated_currency_returns_adj[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_adj[i, j]\n        } else {\n          outp_aggregated_currency_returns_raw[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_raw[i, j] * -1\n          outp_aggregated_currency_returns_adj[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * outp_currency_targets_adj[i, j] * -1\n        }\n        \n        \n      }\n    }\n    \n  }\n  Logger(\"Done!\", inp_new_line = FALSE)\n  \n  # Convert output arrays to dataframes and add to return list\n  # Predictions_raw\n  outp_predictions_raw <- data.frame(outp_predictions_raw)\n  colnames(outp_predictions_raw) <- config$Crosses; rownames(outp_predictions_raw) <- model_xdata[, 1]\n  outp_results$Predictions_Raw <- outp_predictions_raw\n  # Predictions_adj\n  outp_predictions_adj <- data.frame(outp_predictions_adj)\n  colnames(outp_predictions_adj) <- config$Crosses; rownames(outp_predictions_adj) <- model_xdata[, 1]\n  outp_results$Predictions_Adjusted <- outp_predictions_adj\n  # Predictions_accuracy\n  outp_predictions_accuracy <- data.frame(outp_predictions_accuracy)\n  colnames(outp_predictions_accuracy) <- config$Crosses; rownames(outp_predictions_accuracy) <- model_xdata[, 1]\n  outp_results$Predictions_Accuracy <- outp_predictions_accuracy\n  # Predictions_rolling_accuracy\n  outp_rolling_accuracy <- data.frame(outp_rolling_accuracy)\n  colnames(outp_rolling_accuracy) <- config$Crosses; rownames(outp_rolling_accuracy) <- model_xdata[, 1]\n  outp_results$Predictions_Rolling_Accuracy <- outp_rolling_accuracy\n  # Currency_targets_raw\n  outp_currency_targets_raw <- data.frame(outp_currency_targets_raw)\n  colnames(outp_currency_targets_raw) <- config$Currencies; rownames(outp_currency_targets_raw) <- model_xdata[, 1]\n  outp_results$Currency_Targets_Raw <- outp_currency_targets_raw\n  # Currency_targets_adj\n  outp_currency_targets_adj <- data.frame(outp_currency_targets_adj)\n  colnames(outp_currency_targets_adj) <- config$Currencies; rownames(outp_currency_targets_adj) <- model_xdata[, 1]\n  outp_results$Currency_Targets_Adjusted <- outp_currency_targets_adj\n  # Currency_target_returns_raw\n  outp_aggregated_currency_returns_raw <- data.frame(outp_aggregated_currency_returns_raw)\n  colnames(outp_aggregated_currency_returns_raw) <- config$Currencies; rownames(outp_aggregated_currency_returns_raw) <- model_xdata[, 1]\n  outp_results$Currency_Target_Returns_Raw <- outp_aggregated_currency_returns_raw\n  # Currency_target_returns_adj\n  outp_aggregated_currency_returns_adj <- data.frame(outp_aggregated_currency_returns_adj)\n  colnames(outp_aggregated_currency_returns_adj) <- config$Currencies; rownames(outp_aggregated_currency_returns_adj) <- model_xdata[, 1]\n  outp_results$Currency_Target_Returns_Adjusted <- outp_aggregated_currency_returns_adj\n  \n  return (outp_results)\n  \n}\n",
    "created" : 1415279606579.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1584847257",
    "id" : "F496A634",
    "lastKnownWriteTime" : 1415371268,
    "path" : "~/GitHub/PocketMoney/Algo_Classifiers/backtester.R",
    "project_path" : "backtester.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}