{
    "contents" : "#backtester.r\n\nBacktest_ClassifierAlgo <- function(inp_params) {\n  # Perform a backtest of a specified classifier type using specified backtest parameters.\n  # Parameter list must contain the following objects:\n  # Model_XDataFile, XData_To_Use, Fit_Window, Rolling_Window_Performance, Prediction_Adjust_Factor, AdjustPredictedPositions\n  # Classifier_Type, Refit_Classifier_Periodicity\n  \n#   inp_params <- my_tmp_test_params\n#   inp_params <- list(\"Model_XDataFile\" = \"Data/SmallTestFile.csv\",\n#                      \"XData_To_Use\" = c(\"Returns\", \"PC1\", \"PC2\"),\n#                      \"Fit_Window\" = 250,\n#                      \"Rolling_Window_Performance\" = 10,\n#                      \"Prediction_Adjust_Factor\" = 0.5,\n#                      \"AdjustPredictedPositions\" = TRUE,\n#                      \"Classifier_Type\" = \"lda\",\n#                      \"Refit_Classifier_Periodicity\" = NA)\n  \n  outp_results <- list()  # List of backtest results and various calculated objects\n  classifiers_per_cross <- list()  # List object to hold trained classifiers for each cross, at each time (if using re-fitting)\n  \n  # Add the backtest parameters list to the output list for user information\n  outp_results$Backtest_Parameters <- inp_params\n  \n  # Import the XData file\n  # ---\n  Logger(\"Importing XData...\")\n  model_xdata <- Get_XData(inp_params$Model_XDataFile)\n  outp_results$XData <- model_xdata\n  # ---\n  \n  \n  # Perform the initial classifier model fitting\n  # ---\n  Logger(\"Performing initial classifier training...\")\n  tmp_fit_date <- model_xdata$Datetime[inp_params$Fit_Window]\n  for (i_cross in config$Crosses) {\n    inp_params$Cross <- i_cross\n    tmp_training_data <- Extract_CrossTrainingXData(model_xdata, inp_params, inp_params$Fit_Window)\n    classifiers_per_cross[[i_cross]][[tmp_fit_date]] <- Fit_Classifier(tmp_training_data, inp_params)\n  }\n  # ---\n  \n  \n  # Iterate through all data\n  # ---\n  Logger(\"Beginning backtest...\")\n  \n  # Initialise some data.frames to store data throughout iterations \n  tmp_predictions_raw <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(model_xdata$Datetime, config$Crosses)))\n  tmp_predictions_adj <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(model_xdata$Datetime, config$Crosses)))\n  tmp_predictions_accuracy <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(model_xdata$Datetime, config$Crosses)))\n  tmp_predictions_accuracy_rolling <- data.frame(matrix(NA, nrow(model_xdata), length(config$Crosses), dimnames=list(model_xdata$Datetime, config$Crosses)))\n  tmp_currency_targets <- data.frame(matrix(NA, nrow(model_xdata), length(config$Currencies), dimnames=list(model_xdata$Datetime, config$Currencies)))\n  tmp_currency_returns <- data.frame(matrix(NA, nrow(model_xdata), length(config$Currencies), dimnames=list(model_xdata$Datetime, config$Currencies)))\n  \n  # Extract concise array of cross returns for ease of use in backtester\n  cross_returns_array <- model_xdata[, c(1, match(paste(config$Crosses, \".1_Return\", sep=\"\"), names(model_xdata)))]  # Array of cross returns\n  colnames(cross_returns_array) <- c(\"Datetime\", config$Crosses)  # Put better headers (excluding the .1_Return bit)\n  \n  # Begin iterations through model_xdata (beyond initial classifier training data range), generating targets\n  time_since_fit <- 0\n  for (i in (inp_params$Fit_Window + 1):nrow(model_xdata)) {\n  \n    # Progress print at set intervals if specified by inp_params\n    # ---\n    if ((inp_params$Show_Backtest_Progress) && (i %% 50 == 0))\n      Logger(paste(\"On date \", i, \" of \", nrow(model_xdata), \" ... \", sep=\"\"))\n    # ---\n    \n    # Section here to do something special like re-fit a model if certain criteria met\n    # ---\n    if (!is.na(inp_params$Refit_Classifier_Periodicity)) {  # Refit the classifier models here\n      # This should all live in a separate method, just to be called now\n      if (time_since_fit == inp_params$Refit_Classifier_Periodicity) {\n        Logger(\"Re-training all classifiers...\")\n        tmp_fit_date <- model_xdata$Datetime[i]\n        for (k_cross in config$Crosses) {\n          inp_params$Cross <- k_cross\n          tmp_training_data <- Extract_CrossTrainingXData(model_xdata, inp_params, i)\n          classifiers_per_cross[[k_cross]][[tmp_fit_date]] <- Fit_Classifier(tmp_training_data, inp_params)\n        }\n        time_since_fit <- 0\n      }\n    }\n    # ---\n    \n#     # Alternatively, the above re-training procedure can be based on some cross-specific performance stats, and some classifiers can be re-trained independently of others\n#     # ---\n#     tmp_fit_date <- model_xdata$Datetime[i]\n#     for (i_cross in config$Crosses) {\n#       if (TRUE) {  # Some criteria for re-training the classifier\n#         Logger(paste(\"Re-training classifier:\", i_cross, sep=\" \"))\n#         inp_params$Cross <- i_cross\n#         tmp_training_data <- Extract_CrossTrainingXData(model_xdata, inp_params, i)\n#         classifiers_per_cross[[i_cross]][[tmp_fit_date]] <- Fit_Classifier(tmp_training_data, inp_params)\n#       }\n#     }\n#     # ---\n\n    # Classify next day returns\n    # ---\n    for (j in seq_along(config$Crosses)) {\n      tmp_cross <- config$Crosses[j]\n      \n      # Get today data for classifier for this cross\n      inp_params$Cross <- tmp_cross\n      tmp_today_data <- Extract_CrossPredictionXData(model_xdata[i, ], inp_params)  # Current day xdata\n      \n      # Get prediction and record the result as a 1 (buy) or -1 (sell)\n      tmp_today_predictions <- Get_ClassifierPrediction(classifiers_per_cross[[tmp_cross]][[length(classifiers_per_cross[[tmp_cross]])]], tmp_today_data, inp_params)   # Use latest classifier here (to take in to account any re-fitting done)\n      if (tmp_today_predictions$class == \"B\") {\n        tmp_predictions_raw[i, j] <- 1\n        if (!inp_params$AdjustPredictedPositions) {  # Not adjusting predictions, so write raw value\n          tmp_predictions_adj[i, j] <- 1\n        }\n      } else if (tmp_today_predictions$class == \"S\") {\n        tmp_predictions_raw[i, j] <- -1\n        if (!inp_params$AdjustPredictedPositions) {  # Not adjusting predictions, so write raw value\n          tmp_predictions_adj[i, j] <- -1\n        }\n      }\n        \n      # Record whether this was a correct prediction using next day cross return (if not already last row)\n      if (i < nrow(model_xdata))\n        tmp_predictions_accuracy[i, j] <- as.numeric(sign(tmp_predictions_raw[i, j]) == sign(cross_returns_array[[tmp_cross]][i + 1]))\n      \n      # Update rolling stats if enough observations\n      if (i > (inp_params$Fit_Window + inp_params$Rolling_Window_Performance)) {  # enough obs to get rolling accuracy window\n        tmp <- tmp_predictions_accuracy[(i - inp_params$Rolling_Window_Performance):(i - 1), j]  # Window of prediction accuracies for this cross\n        tmp_predictions_accuracy_rolling[i, j] <- sum(tmp == 1) / inp_params$Rolling_Window_Performance  # Rolling accuracy ratio        \n        \n        # If using adjusted predictions, now use these rolling stats to help adjust prediction value\n        if (inp_params$AdjustPredictedPositions) {\n          tmp_predictions_adj[i, j] <- tmp_predictions_raw[i, j] * (1 + inp_params$Prediction_Adjust_Factor * (tmp_predictions_accuracy[i, j] - 0.5) / 0.5)\n        }\n        \n      }\n    }\n    # ---\n    \n    # Aggregate predictions to get currency level targets\n    # ---\n    for (j in seq_along(config$Currencies)) {  \n      tmp_ccy <- config$Currencies[j]  # This currency\n      \n      tmp_cxs_as_base <- config$Crosses[grep(tmp_ccy, substr(config$Crosses, 1, 3))]  # Crosses with the target ccy as base\n      tmp_cxs_as_quote <- config$Crosses[grep(tmp_ccy, substr(config$Crosses, 4, 6))]  # Crosses with the target ccy as quote\n      \n      tmp_pos_as_base <- tmp_pos_as_quote <- 0  # Default values at 0\n      if (!all(is.na(tmp_predictions_adj[tmp_cxs_as_base][i, ])))\n        tmp_pos_as_base <- sum(tmp_predictions_adj[tmp_cxs_as_base][i, ], na.rm=TRUE)  # Sum of predictions where currency is base\n      if (!all(is.na(tmp_predictions_adj[tmp_cxs_as_quote][i, ])))\n        tmp_pos_as_quote <- sum(tmp_predictions_adj[tmp_cxs_as_quote][i, ], na.rm=TRUE)  # Sum of predictions where currency is quote\n      \n      tmp_currency_targets[i, j] <- tmp_pos_as_base - tmp_pos_as_quote  # Total aggregated currency holding (\"as quote\" sum contributes as negative)\n    }\n    # ---\n    \n    # Get resulting return from the target currency holdings\n    # ---\n    if (i < nrow(model_xdata)) {\n      for (j in seq_along(config$Currencies)) {\n        \n        tmp_ccy <- config$Currencies[j]\n        if (tmp_ccy == \"USD\") {\n          tmp_currency_returns[i, j] <- 0\n        } else if (tmp_ccy %in% c(\"EUR\", \"GBP\", \"AUD\", \"NZD\")) {\n          tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j]\n        } else {\n          tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j] * -1\n        }\n        \n      }\n    }\n    # ---\n    \n    time_since_fit <- time_since_fit + 1\n    \n  }\n  Logger(\"Done!\", inp_new_line = FALSE)\n  \n  # Add the fitted classifiers object to return list for user information\n  outp_results$Cross_Classifiers <- classifiers_per_cross\n  \n  # Add some of the data arrays to the return list for user\n  outp_results$Cross_Predictions <- tmp_predictions_adj\n  outp_results$Cross_Predictions_Accuracy <- tmp_predictions_accuracy\n  outp_results$Cross_Predictions_Accuracy_Rolling <- tmp_predictions_accuracy_rolling\n  outp_results$Currency_Targets <- tmp_currency_targets\n  outp_results$Currency_Returns <- tmp_currency_returns\n  \n  return (outp_results)\n  \n}\n\n\n\n\n",
    "created" : 1415279606579.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3531633041",
    "id" : "F496A634",
    "lastKnownWriteTime" : 1415722428,
    "path" : "~/GitHub/PocketMoney/Algo_Classifiers/backtester.R",
    "project_path" : "backtester.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}