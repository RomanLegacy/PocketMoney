for (j in seq_along(config$Currencies)) {
tmp_ccy <- config$Currencies[j]
if (tmp_ccy == "USD") {
tmp_currency_returns[i, j] <- 0
} else if (tmp_ccy %in% c("EUR", "GBP", "AUD", "NZD")) {
tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j]
} else {
tmp_currency_returns[i, j] <- cross_returns_array[[config$Currencies_To_USD[[tmp_ccy]]]][i + 1] * tmp_currency_targets[i, j] * -1
}
}
}
# ---
time_since_fit <- time_since_fit + 1
}
Logger("Done!", inp_new_line = FALSE)
# Add the fitted classifiers object to return list for user information
outp_results$Cross_Classifiers <- classifiers_per_cross
# Add some of the data arrays to the return list for user
outp_results$Cross_Predictions <- tmp_predictions_adj
outp_results$Cross_Predictions_Accuracy <- tmp_predictions_accuracy
outp_results$Cross_Predictions_Accuracy_Rolling <- tmp_predictions_accuracy_rolling
outp_results$Currency_Targets <- tmp_currency_targets
outp_results$Currency_Returns <- tmp_currency_returns
write.table(tmp_predictions_raw, "Results/AUDIT_Cross_Predictions_Raw.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Cross_Predictions, "Results/AUDIT_Cross_Predictions_Adj.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Cross_Predictions_Accuracy, "Results/AUDIT_Cross_Predictions_Accuracy.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Cross_Predictions_Accuracy_Rolling, "Results/AUDIT_Cross_Predictions_Accuracy_Rolling.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Currency_Targets, "Results/AUDIT_Currency_Targets.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Currency_Returns, "Results/AUDIT_Currency_Returns.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$XData, "Results/AUDIT_XData.csv", sep=",", quote=FALSE, row.names = TRUE)
write.table(outp_results$Currency_Returns, "Results/AUDIT_Currency_Returns.csv", sep=",", quote=FALSE, row.names = TRUE)
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA)
backtest_results <- Backtest_ClassifierAlgo(my_params)
my_params <- list("Backtest_Tag" = "WithAdj0.8,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.8,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA)
backtest_results2 <- Backtest_ClassifierAlgo(my_params)
tmp_ccys <- config$Currencies
for (i in seq_along(tmp_ccys)) {
tmp_ccy <- tmp_ccys[i]
tmp <- backtest_results$Currency_Returns[[tmp_ccy]]; tmp[is.na(tmp)] <- 0
tmp2 <- backtest_results2$Currency_Returns[[tmp_ccy]]; tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), ylim=range(c(cumsum(tmp), cumsum(tmp2))), type="l", main=paste(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag, tmp_ccy, sep=" : "))
lines(cumsum(tmp2), col="red", lty=2)
legend("topleft", legend=c(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag), col=1:2, lty=1:2)
}
tmp <- rowSums(backtest_results$Currency_Returns, na.rm=TRUE); tmp[is.na(tmp)] <- 0
tmp2 <- rowSums(backtest_results2$Currency_Returns, na.rm=TRUE); tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), ylim=range(c(cumsum(tmp), cumsum(tmp2))), type="l", main="Aggregate")
lines(cumsum(tmp2), col="red", lty=2)
legend("topleft", legend=c(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag), col=1:2, lty=1:2)
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/RegXData_London.csv",
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA)
backtest_results <- Backtest_ClassifierAlgo(my_params)
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/RegXData_London.csv",
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA)
backtest_results <- Backtest_ClassifierAlgo(my_params)
plot(rowSums(backtest_results$Currency_Returns, na.rm=TRUE), type="l")
plot(cumsum(rowSums(backtest_results$Currency_Returns, na.rm=TRUE)), type="l")
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA)
backtest_results <- Backtest_ClassifierAlgo(my_params)
dim(backtest_results$Currency_Turnovers)
head(backtest_results$Currency_Turnovers, 5)
tail(backtest_results$Currency_Turnovers, 5)
tail(backtest_results$Currency_Turnovers, 1)
sum(tail(backtest_results$Currency_Turnovers, 1))
backtest_results$Currency_Turnovers$USD
tmp_daily_aum <- numeric(nrow(model_xdata))
source('config.R')
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
names(backtest_results)
backtest_results$Daily_Opening_AUMs
numeric(0)
numeric(10)
tmp <- numeric(10)
tmp[1] <- 1e6
tmp
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
backtest_results$Daily_Opening_AUMs
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
source('config.R')
my_params <- list("Backtest_Tag" = "WithAdj0.5,NoRefit",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
backtest_results$Daily_Opening_AUMs
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
my_params <- list("Backtest_Tag" = "WithDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = TRUE)
backtest_results2 <- Backtest_ClassifierAlgo(my_params)
tmp_ccys <- config$Currencies
for (i in seq_along(tmp_ccys)) {
tmp_ccy <- tmp_ccys[i]
tmp <- backtest_results$Currency_Returns[[tmp_ccy]]; tmp[is.na(tmp)] <- 0
tmp2 <- backtest_results2$Currency_Returns[[tmp_ccy]]; tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), ylim=range(c(cumsum(tmp), cumsum(tmp2))), type="l", main=paste(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag, tmp_ccy, sep=" : "))
lines(cumsum(tmp2), col="red", lty=2)
legend("topleft", legend=c(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag), col=1:2, lty=1:2)
}
tmp <- rowSums(backtest_results$Currency_Returns, na.rm=TRUE); tmp[is.na(tmp)] <- 0
tmp2 <- rowSums(backtest_results2$Currency_Returns, na.rm=TRUE); tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), ylim=range(c(cumsum(tmp), cumsum(tmp2))), type="l", main="Aggregate")
lines(cumsum(tmp2), col="red", lty=2)
legend("topleft", legend=c(backtest_results$Backtest_Parameters$Backtest_Tag, backtest_results2$Backtest_Parameters$Backtest_Tag), col=1:2, lty=1:2)
tail(backtest_results$Currency_Targets,5)
tail(backtest_results$Currency_Turnovers,5)
plot(backtest_results$Daily_Opening_AUMs, type="l")
plot(backtest_results2$Daily_Opening_AUMs, type="l")
plot(backtest_results2$Currency_Returns$Aggregate, type="l")
plot(cumsum(backtest_results2$Currency_Returns$Aggregate), type="l")
tmp <- backtest_results$Currency_Returns$Aggregate; tmp[is.na(tmp)] <- 0
tmp2 <- backtest_results2$Currency_Returns$Aggregate; tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), type="l")
lines(cumsum(tmp2), col="red")
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
source('config.R')
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
my_params <- list("Backtest_Tag" = "WithDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = TRUE)
backtest_results2 <- Backtest_ClassifierAlgo(my_params)
backtest_results$Currency_Pnls$Aggregate
tmp <- backtest_results$Currency_Pnls$Aggregate; tmp[is.na(tmp)] <- 0
tmp2 <- backtest_results2$Currency_Pnls$Aggregate; tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), type="l")
plot(cumsum(tmp2), type="l")
plot(cumsum(tmp), type="l")
lines(cumsum(tmp2), col="red")
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/RegXData_London.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
my_params <- list("Backtest_Tag" = "WithDailyReinvest",
"Model_XDataFile" = "Data/RegXData_London.csv",  # SmallTestFile.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = TRUE)
backtest_results2 <- Backtest_ClassifierAlgo(my_params)
# Tmp plots
tmp <- backtest_results$Currency_Pnls$Aggregate; tmp[is.na(tmp)] <- 0
tmp2 <- backtest_results2$Currency_Pnls$Aggregate; tmp2[is.na(tmp2)] <- 0
plot(cumsum(tmp), type="l"); lines(cumsum(tmp2), col="red")
rowSums(abs(backtest_results$Currency_Turnovers))
rowSums(abs(backtest_results$Currency_Turnovers)) - abs(backtest_results$Currency_Turnovers$USD)
barplot(rowSums(abs(backtest_results$Currency_Turnovers)) - abs(backtest_results$Currency_Turnovers$USD))
hist(rowSums(abs(backtest_results$Currency_Turnovers)) - abs(backtest_results$Currency_Turnovers$USD))
barplot((rowSums(abs(backtest_results$Currency_Turnovers)) - abs(backtest_results$Currency_Turnovers$USD)) / 1e6)
source('config.R')
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
names(backtest_results)
tail(backtest_results$Currency_Returns)
tail(backtest_results$Currency_Pnls)
inp_backtest <- backtest_results
tmP-series <- inp_backtest$Currency_Pnls$Aggregate
tmp_series <- inp_backtest$Currency_Pnls$Aggregate
sum(is.na(tmp_series))
tmp_series <- tmp_series[-is.na(tmp_series)]
is.na(tmp_series)
tmp_series <- tmp_series[-which(is.na(tmp_series))]
which(is.na(tmp_series))
sum(tmp_series > 0) / length(tmp_series)  # Accuracy ratio
tmp_pnls <- inp_backtest$Currency_Pnls$Aggregate
tmp_rtns <- inp_backtest$Currency_Returns$Aggregate
tmp_stats <- list()
tmp_stats <- list()
tmp_stats$Accuracy <- sum(tmp_rtns > 0) / length(tmp_rtns)  # Accuracy ratio
tmp_stats$Impact <- sum(tmp_rtns[tmp_rtns > 0]) / -sum(tmp_rtns[tmp_rtns < 0])  # Impact ratio
tmp_stats
tail(inp_backtest$Currency_Returns)
tmp_rtns
tmp_pnls <- inp_backtest$Currency_Pnls$Aggregate
tmp_rtns <- inp_backtest$Currency_Returns$Aggregate
tmp_rtns <- tmp_rtns[-which(is.na(tmp_rtns))]
tmp_rtns
tmp_stats <- list()
tmp_stats$Accuracy <- sum(tmp_rtns > 0) / length(tmp_rtns)  # Accuracy ratio
tmp_stats$Impact <- sum(tmp_rtns[tmp_rtns > 0]) / -sum(tmp_rtns[tmp_rtns < 0])  # Impact ratio
tmp_stats
cumsum(tmp_pnls)
cumsum(tmp_pnls, na.rm=TRUE)
tmp_pnls <- inp_backtest$Currency_Pnls$Aggregate
tmp_rtns <- inp_backtest$Currency_Returns$Aggregate
tmp_pnls <- tmp_pnls[-which(is.na(tmp_pnls))]
tmp_rtns <- tmp_rtns[-which(is.na(tmp_rtns))]
cumsum(tmp_pnls, na.rm=TRUE)
cumsum(tmp_pnls)
plot(cumsum(tmp_pnls), type="l")
pmax(cumsum(tmp_pnls))
cummax
cummax(tmp_pnls)
cummax(cumsum(tmp_pnls))
lines(cummax(cumsum(tmp_pnls)), col="red")
tmp_equitycurve <- cumsum(tmp_pnls)
tmp_hwm <- cummax(tmp_equitycurve)
tmp_stats$Max_Drawdown <- tmp_equitycurve / tmp_hwm - 1
tmp_stats$Max_Drawdown
plot(tmp_stats$Max_Drawdown, type="p")
length(tmp_equitycurve)
length(tmp_hwm)
tmp_equitycurve
tmp_hwm
tmp_equitycurve <- cumsum(tmp_pnls) + inp_backtest$Backtest_Parameters$Start_AUM
tmp_hwm <- cummax(tmp_equitycurve)
tmp_stats$Equity_Curve <- tmp_equitycurve
tmp_stats$Max_Drawdown <- tmp_equitycurve / tmp_hwm - 1
tmp_stats$Max_Drawdown
plot(tmp_stats$Equity_Curve, type="l")
lines(tmp_hwm, col="red")
plot(tmp_stats$Max_Drawdown, type="p")
tmp_stats$Percent_Days_Drawdown_Above_2PC <- sum(tmp_stats$Drawdown_Series < -0.02) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_2PC
tmp_stats$Drawdown_Series
tmp_stats$Drawdown_Series <- tmp_equitycurve / tmp_hwm - 1
tmp_stats$Percent_Days_Drawdown_Above_2PC <- sum(tmp_stats$Drawdown_Series < -0.02) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_2PC
tmp_stats$Percent_Days_Drawdown_Above_5PC <- sum(tmp_stats$Drawdown_Series < -0.02) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_5PC
tmp_stats$Percent_Days_Drawdown_Above_5PC <- sum(tmp_stats$Drawdown_Series < -0.05) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_5PC
tmp_stats$Percent_Days_Drawdown_Above_10PC <- sum(tmp_stats$Drawdown_Series < -0.1) / length(tmp_stats$Drawdown_Series)
Calculate_AlgoPerformanceStats <- function(inp_backtest) {
# Generates performance stats list for an backtested algorithm output
#
# Calls: NA
#
# Inputs:
#     inp_backtest:  backtest object: object returned by a backtest
#
# Returns: a list of stats summarising this backtest performance
#inp_backtest <- backtest_results
tmp_pnls <- inp_backtest$Currency_Pnls$Aggregate
tmp_rtns <- inp_backtest$Currency_Returns$Aggregate
tmp_pnls <- tmp_pnls[-which(is.na(tmp_pnls))]
tmp_rtns <- tmp_rtns[-which(is.na(tmp_rtns))]
tmp_equitycurve <- cumsum(tmp_pnls) + inp_backtest$Backtest_Parameters$Start_AUM
tmp_hwm <- cummax(tmp_equitycurve)
tmp_stats <- list()
tmp_stats$Accuracy <- sum(tmp_rtns > 0) / length(tmp_rtns)  # Accuracy ratio
tmp_stats$Impact <- sum(tmp_rtns[tmp_rtns > 0]) / -sum(tmp_rtns[tmp_rtns < 0])  # Impact ratio
tmp_stats$Performance <- tmp_stats$Accuracy * tmp_stats$Impact  # Performance ratio
tmp_stats$Equity_Curve <- tmp_equitycurve
tmp_stats$Drawdown_Series <- tmp_equitycurve / tmp_hwm - 1
tmp_stats$Percent_Days_Drawdown_Above_2PC <- sum(tmp_stats$Drawdown_Series < -0.02) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_5PC <- sum(tmp_stats$Drawdown_Series < -0.05) / length(tmp_stats$Drawdown_Series)
tmp_stats$Percent_Days_Drawdown_Above_10PC <- sum(tmp_stats$Drawdown_Series < -0.1) / length(tmp_stats$Drawdown_Series)
tmp_stats$Max_Win <- max(tmp_rtns)
tmp_stats$Max_Loss <- min(tmp_rtns)
return (tmp_stats)
}
Calculate_AlgoPerformanceStats(backtest_results)
tmp_predictions_adj
names(tmp_predictions_adj)
names(model_xdata)
match(names(tmp_predictions_adj), names(model_xdata))
match(paste(names(tmp_predictions_adj), ".1_Return", sep=""), names(model_xdata))
dim(tmp_predictions_adj)
dim(model_Xdata)
dim(model_xdata)
tmp_cross_performance <- tmp_predictions_adj[-nrow(tmp_predictions_adj), ] * model_xdata[-1, match(paste(names(tmp_predictions_adj), ".1_Return", sep=""), names(model_xdata))]
tmp_cross_performance
tail(tmp_cross_performance)
tmp_cross_performance[is.na(tmp_cross_performance)] <- 0  # Set NA values to 0
tmp <- cumsum(tmp_cross_performance)
plot(tmp[, 1], type="l")
matplot(tmp[, 1:9], type="l")
matplot(tmp[, 10:19], type="l")
matplot(tmp[, 20:29], type="l")
matplot(tmp[, 30:39], type="l")
source('config.R')
my_params <- list("Backtest_Tag" = "NoDailyReinvest",
"Model_XDataFile" = "Data/SmallTestFile.csv",  # RegXData_London.csv
"XData_To_Use" = c("Returns", "PC1", "PC2"),
"Fit_Window" = 250,
"Show_Backtest_Progress" = TRUE,
"Rolling_Window_Performance" = 10,
"Prediction_Adjust_Factor" = 0.5,
"AdjustPredictedPositions" = TRUE,
"Classifier_Type" = "lda",
"Refit_Classifier_Periodicity" = NA,
"Start_AUM" = 1e6,
"Reinvest_Daily" = FALSE)
backtest_results <- Backtest_ClassifierAlgo(my_params)
inp_backtest <- backtest_results
source('config.R')
tmp_stats <- Calculate_AlgoPerformanceStats(backtest_results)
tmp_stats$Aggregate$Accuracy
tmp_stats$Aggregate$Impact
lapply(tmp_stats$Currency, function(d){d$Accuracy})
lapply(tmp_stats$Currency, function(d){d$Performance})
lapply(tmp_stats$Cross, function(d){d$Performance})
tmp_stats$Cross$EURAUD$Accuracy
tmp_stats$Cross$EURAUD$Equity_Curve
backtest_results$Cross_Returns$EURAUD
tmp_rtns <- backtest_results$Cross_Returns$EURAUD
tmp_lst$Equity_Curve <- cumsum(tmp_rtns)
tmp_lst <- list()
tmp_lst$Equity_Curve <- cumsum(tmp_rtns)
plot(tmp_lst$Equity_Curve, type="l")
tmp_lst$Accuracy <- sum(tmp_rtns > 0) / length(tmp_rtns)  # Accuracy ratio
tmp_lst$Accuracy
tmp_lst$Impact
tmp_lst$Impact <- sum(tmp_rtns[tmp_rtns > 0]) / -sum(tmp_rtns[tmp_rtns < 0])  # Impact ratio
tmp_lst$Impact
tmp_lst$Performance <- tmp_lst$Accuracy * tmp_lst$Impact  # Performance ratio
tmp_lst$Performance
tmp_lst$Total_Performance <- tail(tmp_lst$Equity_Curve, 1)
tmp_lst$Total_Performance
which(is.na(tmp_rtns))
tmp_rtns[-which(is.na(tmp_rtns))]
source('config.R')
tmp_stats <- Calculate_AlgoPerformanceStats(backtest_results)
tmp_stats$Cross$EURAUD$Accuracy
tmp_stats$Cross$EURAUD$Impact
unlist(lapply(tmp_stats$Cross, function(d){d$Accuracy}))
source('config.R')
tmp_stats <- Calculate_AlgoPerformanceStats(backtest_results)
unlist(lapply(tmp_stats$Cross, function(d){d$Accuracy}))
unlist(lapply(tmp_stats$Cross, function(d){d$Impact}))
unlist(lapply(tmp_stats$Cross, function(d){d$Performance}))
mean
source('config.R')
tmp_stats <- Calculate_AlgoPerformanceStats(backtest_results)
unlist(lapply(tmp_stats$Cross, function(d){d$Performance}))
order(unlist(lapply(tmp_stats$Cross, function(d){d$Performance})))
tmp <- unlist(lapply(tmp_stats$Cross, function(d){d$Performance}))
tmp_perf <- unlist(lapply(tmp_stats$Cross, function(d){d$Performance}))
tmp_perf[order(tmp_perf)]
tmp_perf[order(tmp_perf, decreasing = TRUE)]
tmp_acc <- unlist(lapply(tmp_stats$Cross, function(d){d$Accuracy}))
tmp_acc <- tmp_acc[order(tmp_acc, decreasing = TRUE)]
tmp_imp <- unlist(lapply(tmp_stats$Cross, function(d){d$Impact}))
tmp_imp <- tmp_imp[order(tmp_imp, decreasing = TRUE)]
tmp_perf <- unlist(lapply(tmp_stats$Cross, function(d){d$Performance}))
tmp_perf <- tmp_perf[order(tmp_perf, decreasing = TRUE)]
tmp_acc
tmp_imp
tmp_perf
